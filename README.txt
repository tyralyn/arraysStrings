Various programs pertaining to arrays and strings. All implemented in Python

checkPermutation: given two strings, check to see whether one is a permutation of the other. This is done in the first method (checkPermutation) by using Python dictionaries to store how many of each letter is present in each string, and comparing the resulting dictionaries. The second method (checkPermutation2) provided is faster: using native string-to-list method, convert one string to a list. Then, iterate through the second string and remove the characters from the list. If there is a character in the second string that is not in the first, the method automatically returns false, handling the case of second string containing something that the first string does not. If that does not occur, then at the end of the function, if the list is not empty, then the case of the first string containing something that the second does not has been handled. 

isUnique: determines whether a string has unique characters or not. In the first method (isUnique), every letter is checked against a list. If it appears in the list, then it is not unique, and the function returns false. If it is not in the list, it is added to the list. In the second method (isUniqueDict), a dictionary is used in the same manner. In the third method (isUniqueNoDataStructures), for each letter, the rest of the string is checked to see if it contains it. An alternative method is to sort the string's characters. 

URLify: replaces spaces in a passed-in string with '%20', as is done in a URL. The first method (URLify) is done by simply replacing every space with the requested string, and the second (URLify2)is done by splitting the string with the default split method, which splits upon spaces, and then rejoining with the desired sequence '%20'

palindromePermutation: checks to see if string is a permutation of a palindrome, excluding non-letter characters (symbols, spaces, whitespace) in a case-insensitive way. The provided method (palindromePermutation) checks each character in the string to determine whether it is a letter with the ord method. Then, the lowercase version of the character is obtained and appended to a list if it is not already present, and removed from the list if it is present. At the end of the method, if the list has more than one item, then it has more than one unmatched letter, which means it is not a palindrome permutation. 