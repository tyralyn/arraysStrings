Various programs pertaining to arrays and strings. All implemented in Python

checkPermutation: given two strings, check to see whether one is a permutation of the other. This is done in the first method (checkPermutation) by using Python dictionaries to store how many of each letter is present in each string, and comparing the resulting dictionaries. The second method (checkPermutation2) provided is faster: using native string-to-list method, convert one string to a list. Then, iterate through the second string and remove the characters from the list. If there is a character in the second string that is not in the first, the method automatically returns false, handling the case of second string containing something that the first string does not. If that does not occur, then at the end of the function, if the list is not empty, then the case of the first string containing something that the second does not has been handled. 

isPalindrome: determines whether string is palindrome or not. includes method using Python indexing and method to simulate solution with a linked list, if a buffer (stack) is allowed. 

isUnique: determines whether a string has unique characters or not. In the first method (isUnique), every letter is checked against a list. If it appears in the list, then it is not unique, and the function returns false. If it is not in the list, it is added to the list. In the second method (isUniqueDict), a dictionary is used in the same manner. In the third method (isUniqueNoDataStructures), for each letter, the rest of the string is checked to see if it contains it. An alternative method is to sort the string's characters. 

oneAway: takes two strings and determines whether one or zero 'edits' (inserting a char, removing a char, or changing a char) can account for the differences between the two strings. This method (oneAway) first checks the strings to see if they are completely the same, to reduce redundancy. Then, it checks to see whether the two strings have a difference in length greater than one -- if so, then more than one 'edit' has occurred between them. Then, the longer of strings is found. The checking algorithm works by iterating through the two strings with separate iterators. If a difference is found between the two strings and the strings are of the same length, the existence of the difference is noted and the iterations continue. If the strings are not of the same length, than an insertion is assumed, the difference noted, and the interation continued. In this case, the iterator of the longer string is incremented one extra time. If a difference is noted when one has already been recorded, then we can conclude that there are two or more 'edits' made. 

palindromePermutation: checks to see if string is a permutation of a palindrome, excluding non-letter characters (symbols, spaces, whitespace) in a case-insensitive way. The provided method (palindromePermutation) checks each character in the string to determine whether it is a letter with the ord method. Then, the lowercase version of the character is obtained and appended to a list if it is not already present, and removed from the list if it is present. At the end of the method, if the list has more than one item, then it has more than one unmatched letter, which means it is not a palindrome permutation. 

stringCompression: compress a string in the following way: 'aaabbccccc' => 'a3b2c5'. If the resulting compression is less space-efficient than the original string, return the original string. This method (stringCompression) iterates through the string, counting sequences of the same letter, and forming the result string. Then, the result string is compared to the original in terms of length, and the smaller string is returned. If the result and original strings are the same size, then the original string is returned. 

stringRotation: using a substring/contains method a minimum of number of times, determine whether something like 'waterbottle'->'erbottlewat' is going on. The first method (stringRotation) uses the substring/contains method twice by creating strings that consist of the two passed in doubled, and checking to see whether the doubled string contains the other string passed in. The second method (stringRotation2) only eliminates the need to use the substring/contains method more than once by comparing lengths of strings to determine whether they are identical. 

URLify: replaces spaces in a passed-in string with '%20', as is done in a URL. The first method (URLify) is done by simply replacing every space with the requested string, and the second (URLify2)is done by splitting the string with the default split method, which splits upon spaces, and then rejoining with the desired sequence '%20'

